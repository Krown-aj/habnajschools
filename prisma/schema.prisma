// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Administration {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String?
  username      String?
  role          Roles
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
}

model Student {
  id                 String              @id @default(cuid())
  admissionnumber    String              @unique
  firstname          String
  surname            String
  othername          String?
  birthday           DateTime
  gender             UserSex
  religion           String?
  house              String
  bloodgroup         String
  admissiondate      DateTime            @default(now())
  email              String?             @unique
  phone              String?             @unique
  address            String
  state              String
  lga                String
  avarta             String?
  password           String?
  active             Boolean             @default(true)
  parentid           String
  parent             Parent              @relation(fields: [parentid], references: [id])
  classid            String
  class              Class               @relation(fields: [classid], references: [id])
  attendances        Attendance[]
  studentAssessments StudentAssessment[]
  assignments        Assignment[]
  submissions        Submission[]
  answers            Answer[]
  grades             StudentGrade[]
  reportCards        ReportCard[]
  traits             StudentTrait[]
  payments           Payment[]
  notifications      Notification[]
  promotions         StudentPromotion[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model Teacher {
  id            String         @id @default(cuid())
  title         String
  firstname     String
  surname       String
  othername     String?
  birthday      DateTime?
  bloodgroup    String?
  gender        UserSex
  qualification String?
  state         String
  lga           String
  email         String         @unique
  phone         String?        @unique
  address       String
  avarta        String?
  password      String?
  active        Boolean        @default(true)
  subjects      Subject[]
  classes       Class[]
  lessons       Lesson[]
  assignments   Assignment[]
  tests         Test[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Parent {
  id            String         @id @default(cuid())
  title         String
  firstname     String
  surname       String
  othername     String?
  birthday      DateTime?
  bloodgroup    String?
  gender        UserSex
  occupation    String
  religion      String
  state         String
  lga           String
  email         String         @unique
  phone         String         @unique
  address       String
  password      String?
  active        Boolean        @default(true)
  students      Student[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Subject {
  id                 String              @id @default(cuid())
  name               String
  category           String
  teachers           Teacher[]
  assignments        Assignment[]
  lessons            Lesson[]
  tests              Test[]
  studentAssessments StudentAssessment[]
  studentGrades      StudentGrade[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model Class {
  id                 String              @id @default(cuid())
  name               String              @unique
  category           String?
  capacity           Int?
  formmasterid       String?
  formmaster         Teacher?            @relation(fields: [formmasterid], references: [id])
  students           Student[]
  reportCards        ReportCard[]
  lessons            Lesson[]
  events             Event[]
  announcements      Announcement[]
  assignments        Assignment[]
  tests              Test[]
  studentAssessments StudentAssessment[]
  studentGrades      StudentGrade[]
  fromPromotions     StudentPromotion[]  @relation("FromClass")
  toPromotions       StudentPromotion[]  @relation("ToClass")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model PaymentSetup {
  id          String   @id @default(cuid())
  amount      Int
  baseFees    Int
  partpayment Boolean  @default(true)
  session     String
  term        String
  level       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id        String        @id @default(cuid())
  session   String
  term      Terms
  amount    Int
  status    PaymentStatus @default(PENDING)
  studentid String
  student   Student       @relation(fields: [studentid], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Term {
  id        String     @id @default(cuid())
  start     DateTime
  end       DateTime
  nextterm  DateTime
  daysopen  Int
  session   String
  term      Terms
  status    TermStatus
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  subjectid   String
  subject     Subject      @relation(fields: [subjectid], references: [id])
  classid     String
  class       Class        @relation(fields: [classid], references: [id])
  teacherid   String
  teacher     Teacher      @relation(fields: [teacherid], references: [id])
  attendances Attendance[]
}

model Assignment {
  id          String       @id @default(cuid())
  title       String
  text        String
  file        String
  duedate     DateTime
  graded      Boolean
  subjectid   String
  subject     Subject      @relation(fields: [subjectid], references: [id])
  teacherid   String
  teacher     Teacher      @relation(fields: [teacherid], references: [id])
  classid     String
  class       Class        @relation(fields: [classid], references: [id])
  submissions Submission[]
  students    Student[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Test {
  id           String     @id @default(cuid())
  title        String
  status       TestStatus
  instructions String
  duration     Int
  maxscore     Int
  open         Boolean
  testdate     DateTime
  testtime     DateTime
  term         String
  questions    Question[]
  answers      Answer[]
  subjectid    String
  subject      Subject    @relation(fields: [subjectid], references: [id])
  teacherid    String
  teacher      Teacher    @relation(fields: [teacherid], references: [id])
  classid      String
  class        Class      @relation(fields: [classid], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Question {
  id      String @id @default(cuid())
  text    String
  options Json
  answer  String
  testid  String
  test    Test   @relation(fields: [testid], references: [id])
}

model Answer {
  id        String   @id @default(cuid())
  score     Int
  testid    String
  test      Test     @relation(fields: [testid], references: [id])
  studentid String
  student   Student  @relation(fields: [studentid], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Submission {
  id           String      @id @default(cuid())
  answer       String
  feedback     String
  score        Int
  file         String
  assignmentId String?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model GradingPolicy {
  id          String       @id @default(cuid())
  title       String
  description String?
  passMark    Int
  maxScore    Int
  assessments Assessment[]
  gradings    Grading[]
  traits      Trait[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([createdAt])
}

model Assessment {
  id                 String              @id @default(cuid())
  name               String
  weight             Float
  maxScore           Int
  gradingPolicyId    String
  gradingPolicy      GradingPolicy       @relation(fields: [gradingPolicyId], references: [id])
  studentGrades      StudentGrade[]
  studentAssessments StudentAssessment[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@unique([gradingPolicyId, name], name: "unique_assessment_name_per_policy")
  @@index([gradingPolicyId])
}

model Grading {
  id                 String              @id @default(cuid())
  title              String
  session            String
  term               Terms
  published          Boolean             @default(false)
  gradingPolicyId    String
  gradingPolicy      GradingPolicy       @relation(fields: [gradingPolicyId], references: [id])
  reportCards        ReportCard[]
  studentAssessments StudentAssessment[]
  studentGrades      StudentGrade[]
  studentTraits      StudentTrait[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@unique([gradingPolicyId, session, term], name: "unique_policy_session_term")
  @@index([session, term, gradingPolicyId])
}

model StudentGrade {
  id              String       @id @default(cuid())
  score           Float
  grade           String?
  remark          String?
  subjectPosition String?
  assessments     Assessment[]
  studentId       String
  student         Student      @relation(fields: [studentId], references: [id])
  classId         String
  class           Class        @relation(fields: [classId], references: [id])
  subjectId       String
  subject         Subject      @relation(fields: [subjectId], references: [id])
  gradingId       String
  grading         Grading      @relation(fields: [gradingId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([studentId, gradingId, subjectId, classId], name: "unique_student_grade_per_subject")
  @@index([studentId, gradingId, subjectId, classId])
}

model StudentAssessment {
  id String @id @default(cuid())

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  assessmentId String
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  classId String
  class   Class  @relation(fields: [classId], references: [id])

  gradingId String
  grading   Grading @relation(fields: [gradingId], references: [id])

  score Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // enforce one mark per (student, assessment, subject, class, grading)
  @@unique([studentId, assessmentId, subjectId, classId, gradingId], name: "unique_student_assessment")
  @@index([studentId, assessmentId, subjectId, classId, gradingId])
}

model Trait {
  id              String         @id @default(cuid())
  name            String
  category        TraitCategory
  gradingpolicyId String
  gradingpolicy   GradingPolicy  @relation(fields: [gradingpolicyId], references: [id])
  studentTraits   StudentTrait[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model StudentTrait {
  id        String   @id @default(cuid())
  score     Int
  remark    String?
  traitId   String
  trait     Trait    @relation(fields: [traitId], references: [id])
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  gradingId String
  grading   Grading  @relation(fields: [gradingId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReportCard {
  id               String   @id @default(cuid())
  totalScore       Float?
  averageScore     Float?
  classPosition    String?
  remark           String?
  formmasterRemark String?
  studentId        String
  student          Student  @relation(fields: [studentId], references: [id])
  classId          String
  class            Class    @relation(fields: [classId], references: [id])
  gradingId        String
  grading          Grading  @relation(fields: [gradingId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([studentId, gradingId, classId])
}

model StudentPromotion {
  id          String          @id @default(cuid())
  studentId   String
  student     Student         @relation(fields: [studentId], references: [id])
  fromClassId String
  fromClass   Class           @relation("FromClass", fields: [fromClassId], references: [id])
  toClassId   String
  toClass     Class           @relation("ToClass", fields: [toClassId], references: [id])
  session     String
  promotedAt  DateTime        @default(now())
  status      PromotionStatus
  remark      String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     String?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     String?
  class       Class?   @relation(fields: [classId], references: [id])
}

model News {
  id          String       @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  author      String
  category    NewsCategory
  status      NewsStatus   @default(DRAFT)
  featured    Boolean      @default(false)
  image       String?
  readTime    Int?
  publishedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Gallery {
  id          String          @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  category    GalleryCategory
  isActive    Boolean         @default(true)
  order       Int?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  broadcast Boolean          @default(false)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  studentId String?
  student   Student?         @relation(fields: [studentId], references: [id])
  teacherId String?
  teacher   Teacher?         @relation(fields: [teacherId], references: [id])
  parentId  String?
  parent    Parent?          @relation(fields: [parentId], references: [id])
  adminId   String?
  admin     Administration?  @relation(fields: [adminId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Roles {
  Admin
  Super
  Management
}

enum TestStatus {
  Completed
  Cancelled
  Pending
}

enum TermStatus {
  Active
  Inactive
}

enum Terms {
  First
  Second
  Third
}

enum NewsCategory {
  ACHIEVEMENT
  SPORTS
  FACILITIES
  ARTS
  EDUCATION
  COMMUNITY
  GENERAL
}

enum NewsStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum GalleryCategory {
  CAROUSEL
  LOGO
  FACILITIES
  EVENTS
  STUDENTS
  TEACHERS
  ACHIEVEMENTS
  GENERAL
}

enum NotificationType {
  PAYMENT_DUE
  PAYMENT_CONFIRMED
  NEW_USER
  NEW_EVENT
  NEW_ANNOUNCEMENT
  ASSIGNMENT_DUE
  TEST_SCHEDULED
  GENERAL
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
}

enum TraitCategory {
  AFFECTIVE
  PSYCHOMOTOR
  BEHAVIOURAL
  COGNITIVE
}

enum PromotionStatus {
  PROMOTED
  REPEATED
  GRADUATED
  WITHDRAWN
}
